[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Polars",
    "section": "",
    "text": "Preface\nWelcome to “Introduction to Polars.” This book emerged from my journey as a data science student who chose to explore Polars rather than pandas—the standard library taught in my course. When I approached my instructor about using this alternative technology, he supported my decision while honestly acknowledging that course materials wouldn’t cover my chosen path.\nAs I navigated through the course, I discovered a significant gap in beginner-friendly Polars resources for data science newcomers. While the official documentation proved valuable, it often assumed a level of familiarity that beginners might not possess. Nevertheless, through persistence and experimentation, I gained proficiency and successfully completed my coursework.\nThis book aims to bridge that gap by offering an accessible introduction to Polars for those new to data manipulation libraries. I’ve designed it especially for readers with limited prior experience in data science, incorporating the insights and solutions I discovered along my learning journey.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapter1.html",
    "href": "chapter1.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 What is Polars\nPolars is a modern data manipulation library avalible for Python, R, NodeJs and Rust. It is designed as a high-performance alternative to pandas, especially for large datasets. It features syntax that’s both human-readable and similar to R’s data manipulation paradigms. Polars stands out for three main reasons:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapter1.html#what-is-polars",
    "href": "chapter1.html#what-is-polars",
    "title": "1  Introduction",
    "section": "",
    "text": "Performance: Built in Rust, Polars delivers exceptional speed through parallel processing by default and a sophisticated query optimizer that analyzes and improves execution plans.\nMemory efficiency: Using a columnar memory format rather than row-based storage, Polars efficiently handles larger-than-memory datasets and performs operations with minimal memory overhead.\nLazy evaluation: Polars supports both eager and lazy execution modes. The lazy API builds optimized query plans before execution, similar to database query planners, resulting in more efficient data processing pipelines.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapter1.html#who-uses-polars",
    "href": "chapter1.html#who-uses-polars",
    "title": "1  Introduction",
    "section": "1.2 Who uses Polars",
    "text": "1.2 Who uses Polars",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapter2.html",
    "href": "chapter2.html",
    "title": "2  Installation",
    "section": "",
    "text": "2.1 Basic Installation\nPolars can be installed using pip:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "chapter2.html#basic-installation",
    "href": "chapter2.html#basic-installation",
    "title": "2  Installation",
    "section": "",
    "text": "pip install polars",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "chapter2.html#optional-dependencies",
    "href": "chapter2.html#optional-dependencies",
    "title": "2  Installation",
    "section": "2.2 Optional Dependencies",
    "text": "2.2 Optional Dependencies\nPolars offers various optional dependencies for specific use cases, which are omitted to reduce the footprint of the library. Throught this guide I will mention when specific dependancts are required/used.\nTo install all optional dependencies:\npip install 'polars[all]'\n\n\n\n\n\n\nNote\n\n\n\nI recommend installing all optional dependencies due to convenience. And the fact that the relative footprint is still not excessive.\n\n\n\n2.2.1 Interoperability\nPolars offers the following dependencys for increased interoperability between different librarys.\n\npandas: allows conversion to and from pandas dataframes/series\nnumpy: allows conversion between numpy arrays\npyarrow:allows for data conversion between PyArrow tables and arrays\npydantic: allows for conversion from Pydantic models to polars\n\npip install 'polars[pandas, numpy, pyarrow, pydantic]' # remove the unused dependencies\n\n\n2.2.2 Excel\nPolars has a few options for different engines used to convert xlsx files to a format more readable by polars.\nThe different engines avalible are:\n\ncalamine\nopenpyxl\nxlsx2csv\n\n\n\n\n\n\n\nTip\n\n\n\nThere are some differences in the engines performance and behaviour to learn more see the official documentation.\n\n\nAdditionally Polars support one other optional dependency related to Excel: - xlsxwriter: which allows you to write to xlsx files\npip install 'polars[excel]' # if you want to install all Excel dependencies\npip install 'polars[calamine, openpyxl, xlsx2csv, xlsxwriter]' # if you want to pick and chose \n\n\n2.2.3 Database\n\n\n2.2.4 Cloud\n\n\n2.2.5 Other I/O\n\n\n2.2.6 Other",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "chapter3.html",
    "href": "chapter3.html",
    "title": "3  Dataframes and Series",
    "section": "",
    "text": "3.1 Data types\nPolars allows you to store data in a variety of formats called data types. These data types fall generally into the following categories:\nThe most common data types you will be working with are generally: Strings, signed and unsigned integers, floating point numbers or floats, decimals, dates or datetimes and booleans. For more information on each of these data types see Appendix A.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dataframes and Series</span>"
    ]
  },
  {
    "objectID": "chapter3.html#data-types",
    "href": "chapter3.html#data-types",
    "title": "3  Dataframes and Series",
    "section": "",
    "text": "Numeric: Signed integers, unsigned integers, floating point numbers, and decimals\nNested: Lists, structs, and arrays for handling complex data\nTemporal: Dates, datetimes, and times for working with time-based data\nMiscellaneous: Strings, binary data, Booleans, categoricals, enums, and objects",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dataframes and Series</span>"
    ]
  },
  {
    "objectID": "chapter3.html#series",
    "href": "chapter3.html#series",
    "title": "3  Dataframes and Series",
    "section": "3.2 Series",
    "text": "3.2 Series\nThe two most common data structures in Polars are DataFrames and Series. Series are one-dimensional data structures where\nCreating a Series is straightforward with the following syntax:\npl.Series(name, values_list)\nWhere “name” is the label for your Series and “values_list” contains the data. Here’s a simple example:\n\nimport polars as pl\ns = pl.Series(\"example\", [1, 2, 3, 4, 5])\ns\n\n\nshape: (5,)\n\n\n\nexample\n\n\ni64\n\n\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n\n\n\n\nWhen you create a series Polars will infer the data type for the values you provide. So in the above example I gave it [1, 2, 3, 4, 5] and it set the datatype to Int64 if instead gave it [1, 2, 3, 4.0, 5] it would asume it is Float64.\n\ns2 = pl.Series(\"payment\", [132.50, 120, 116, 98.75 ,42])\ns2\n\n\nshape: (5,)\n\n\n\npayment\n\n\nf64\n\n\n\n\n132.5\n\n\n120.0\n\n\n116.0\n\n\n98.75\n\n\n42.0\n\n\n\n\n\n\n\ns3 = pl.Series(\"mixed\", [1, \"text\", True, 3.14], strict=False)\n# series.dytpe outputs a the data type of the series\nprint(f\"Mixed series type: {s3.dtype}\")\ns3\n\nMixed series type: String\n\n\n\nshape: (4,)\n\n\n\nmixed\n\n\nstr\n\n\n\n\n\"1\"\n\n\n\"text\"\n\n\n\"true\"\n\n\n\"3.14\"\n\n\n\n\n\n\nYou can set the data type of the series as well by using the dtype parameter. A example use case is when storing a id number the id number should be stored as a string not a int due to the fact that we we do not want to perform mathmatical operations on the identification number therefore it is best stored as a string.\n\n# strict=False allows automatic conversion from different data types\ns3 = pl.Series(\"id number\", [143823, 194203, 553420, 234325, 236532], dtype=pl.Utf8, strict=False)\ns3\n\n\nshape: (5,)\n\n\n\nid number\n\n\nstr\n\n\n\n\n\"143823\"\n\n\n\"194203\"\n\n\n\"553420\"\n\n\n\"234325\"\n\n\n\"236532\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dataframes and Series</span>"
    ]
  },
  {
    "objectID": "chapter3.html#dataframes",
    "href": "chapter3.html#dataframes",
    "title": "3  Dataframes and Series",
    "section": "3.3 Dataframes",
    "text": "3.3 Dataframes\nDataFrames are tabular data structures (rows and columns) composed of multiple Series, with each column representing a single Series. The design of a dataframe is called schema. A schema is a mapping of column to the data types.\nDataframes are the workhorses of data analysis and what you’ll use most frequently.\nWith DataFrames, you can write powerful queries to filter, transform, aggregate, and reshape your data efficiently.\nDataFrames can be created in several ways:\n\nFrom a dictionary of sequences (lists, arrays)\nWith explicit schema specification\nFrom a sequence of (name, dtype) pairs\nFrom NumPy arrays\nFrom a list of lists (row-oriented data)\nBy converting pandas DataFrames\nBy importing existing tabular data from CSVs, JSON, SQL, Parquet files, etc.\n\nIn real-world environments, you’ll typically work with preexisting data, though understanding various creation methods is valuable. We’ll cover data import techniques later, but for now, here’s an example of a DataFrame created from a dictionary of lists:\n\n# Create a DataFrame from a dictionary of lists\ndf = pl.DataFrame({\n    \"name\": [\"Alice\", \"Bob\", \"Charlie\", \"David\"],\n    \"age\": [25, 30, 35, 40],\n    \"city\": [\"New York\", \"Boston\", \"Chicago\", \"Seattle\"],\n    \"salary\": [75000, 85000, 90000, 95000]\n})\n\ndf\n\n\nshape: (4, 4)\n\n\n\nname\nage\ncity\nsalary\n\n\nstr\ni64\nstr\ni64\n\n\n\n\n\"Alice\"\n25\n\"New York\"\n75000\n\n\n\"Bob\"\n30\n\"Boston\"\n85000\n\n\n\"Charlie\"\n35\n\"Chicago\"\n90000\n\n\n\"David\"\n40\n\"Seattle\"\n95000\n\n\n\n\n\n\nevery data frame has a shape. the shape is the number of rows and columns in a dataframe shape(rows,columns)\nthe shape for the above dataframe is:\n\nprint(df.shape)\n\n(4, 4)\n\n\nyou can view the schema of any dataframe with the following command\n\nprint(df.schema)\n\nSchema({'name': String, 'age': Int64, 'city': String, 'salary': Int64})\n\n\nWe see here that the schema is returned as a dictionary. In the above example the column name has the string datatype. Though you can view the data type already when displaying the dataframe.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dataframes and Series</span>"
    ]
  },
  {
    "objectID": "chapter3.html#inspecting-dataframes",
    "href": "chapter3.html#inspecting-dataframes",
    "title": "3  Dataframes and Series",
    "section": "3.4 Inspecting Dataframes",
    "text": "3.4 Inspecting Dataframes\nIn polars there are a varity of ways to inspect a dataframe, all of which have different use cases. The ones that we will be covering right now are:\n\nhead\ntail\nglimpse\nsample\ndescribe\nslice\n\n\n3.4.1 head\nthe head functions allows you to view the first x rows of the dataframe. By default the number of rows it shows is 5, though you can specify the number of rows to view.\ndataframe.head(n)\nWhere n is the number of rows to return if you give it a negative number it will turn all rows except the last n rows.\n\nimport numpy as np\n\n# Create NumPy arrays for sandwich data\nsandwich_names = np.array(['BLT', 'Club', 'Tuna', 'Ham & Cheese', 'Veggie'])\nprices = np.array([8.99, 10.50, 7.50, 6.99, 6.50])\ncalories = np.array([550, 720, 480, 520, 320])\nvegetarian = np.array([False, False, False, False, True])\n\n# Create DataFrame from NumPy arrays\nsandwich_df = pl.DataFrame({\n    \"sandwich\": sandwich_names,\n    \"price\": prices,\n    \"calories\": calories,\n    \"vegetarian\": vegetarian\n})\n\n\nsandwich_df.head(3)\n\n\nshape: (3, 4)\n\n\n\nsandwich\nprice\ncalories\nvegetarian\n\n\nstr\nf64\ni64\nbool\n\n\n\n\n\"BLT\"\n8.99\n550\nfalse\n\n\n\"Club\"\n10.5\n720\nfalse\n\n\n\"Tuna\"\n7.5\n480\nfalse\n\n\n\n\n\n\n\n\n3.4.2 tail\nThe tail function is essentially the inverse of head. It allows you to view the last n rows of the dataframe. The default for tail is also five rows.\ndataframe.tail(n)\nWhere n is the number of rows to return if you give it a negative number it will turn all rows except the first n rows.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Dataframes and Series</span>"
    ]
  },
  {
    "objectID": "appendix1.html",
    "href": "appendix1.html",
    "title": "Appendix A — Common Data Types",
    "section": "",
    "text": "Data Type\nPolars Type\nDescription\nExample\n\n\n\n\nStrings\npl.Utf8\nText data\n\"hello\"\n\n\nSigned Integers\npl.Int8, pl.Int16, pl.Int32, pl.Int64\nWhole numbers that can be positive or negative\n-42\n\n\nUnsigned Integers\npl.UInt8, pl.UInt16, pl.UInt32, pl.UInt64\nWhole numbers that can only be positive\n42\n\n\nFloating Point\npl.Float32, pl.Float64\nReal numbers with decimal points\n3.14159\n\n\nDecimals\npl.Decimal\nFixed-precision numbers, useful for financial calculations\nDecimal(\"10.99\")\n\n\nDates/DateTimes\npl.Date, pl.Datetime\nCalendar dates and time values\n2023-01-01, 2023-01-01T12:30:00\n\n\nBooleans\npl.Boolean\nLogical values: true or false\nTrue, False\n\n\nTime\npl.Time\nTime of day without date\n12:30:45\n\n\nDuration\npl.Duration\nTime spans or intervals\n3d 12h 30m 45s\n\n\nCategorical\npl.Categorical\nEfficient storage for repeated string values\npl.Series([\"a\", \"b\", \"a\"]).cast(pl.Categorical)\n\n\nList\npl.List\nLists of values of any type\n[1, 2, 3]\n\n\nStruct\npl.Struct\nComposite type with named fields\n{\"field1\": 1, \"field2\": \"a\"}\n\n\nNull\npl.Null\nMissing or undefined values\nNone or null",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Common Data Types</span>"
    ]
  }
]